WHERE clause syntax in SQL
Using the WHERE clause to filter rows in a table
Comparison operators used in the WHERE clause
Using the equal operator (=) in the WHERE clause
Using the not equal operator (!= or <> ) in the WHERE clause
Using the greater than operator (>) in the WHERE clause
Using the less than operator (<) in the WHERE clause
Using the greater than or equal to operator (>=) in the WHERE clause
Using the less than or equal to operator (<=) in the WHERE clause
Using the IN operator in the WHERE clause to filter multiple values
Using the NOT IN operator in the WHERE clause to exclude multiple values
Using the LIKE operator in the WHERE clause to perform pattern matching
Using wildcards (%, _) with the LIKE operator in the WHERE clause
Using the BETWEEN operator in the WHERE clause to filter a range of values
Using the NOT BETWEEN operator in the WHERE clause to exclude a range of values
Using the IS NULL operator in the WHERE clause to filter rows with null values
Using the IS NOT NULL operator in the WHERE clause to filter rows with non-null values
Using logical operators (AND, OR, NOT) in the WHERE clause to combine conditions
Using parentheses in the WHERE clause to control the order of evaluation
Using multiple conditions in the WHERE clause using logical operators
Using subqueries in the WHERE clause to filter based on results from another query
Using the EXISTS operator in the WHERE clause to check for existence of data in a subquery
Using the ANY operator in the WHERE clause to compare a value with multiple values in a subquery
Using the ALL operator in the WHERE clause to compare a value with all values in a subquery
Using the SOME operator in the WHERE clause to compare a value with some values in a subquery
Using the IN operator with a subquery in the WHERE clause
Using the NOT EXISTS operator in the WHERE clause to check for non-existence of data in a subquery
Using the NOT IN operator with a subquery in the WHERE clause
Using the EXISTS operator with multiple subqueries in the WHERE clause
Using the CASE statement in the WHERE clause to conditionally filter rows
Using the CASE statement with a subquery in the WHERE clause
Using the CASE statement with logical operators in the WHERE clause
Using the CASE statement with arithmetic operators in the WHERE clause
Using the CASE statement to filter based on multiple conditions in the WHERE clause
Using the CASE statement with the BETWEEN operator in the WHERE clause
Using the CASE statement with the LIKE operator in the WHERE clause
Using the CASE statement with the IS NULL operator in the WHERE clause
Using the CASE statement with the EXISTS operator in the WHERE clause
Using the CASE statement with the IN operator in the WHERE clause
Using the CASE statement with the NOT EXISTS operator in the WHERE clause
Using the CASE statement with the NOT IN operator in the WHERE clause
Using the CASE statement to filter based on different columns in the WHERE clause
Using the CASE statement to filter based on aggregate functions in the WHERE clause
Using the CASE statement to filter rows based on a calculated value in the WHERE clause
Using the CASE statement with date-related functions in the WHERE clause
Using the CASE statement with string manipulation functions in the WHERE clause
Using the CASE statement with mathematical functions in the WHERE clause
Using the CASE statement with logical functions in the WHERE clause
Using the CASE statement with conversion functions in the WHERE clause
Using the CASE statement with aggregate functions in the WHERE clause
Using the GROUP BY clause with the WHERE clause in SQL
Using the HAVING clause with the WHERE clause in SQL
Using the ORDER BY clause with the WHERE clause in SQL
Using the LIMIT clause with the WHERE clause in SQL
Using the FETCH clause with the WHERE clause in SQL
Using the OFFSET clause with the WHERE clause in SQL
Using the TOP clause with the WHERE clause in SQL (for Microsoft SQL Server)
Using the ROWNUM clause with the WHERE clause in SQL (for Oracle)
Using the ROW_NUMBER function with the WHERE clause in SQL
Using the DENSE_RANK function with the WHERE clause in SQL
Using the RANK function with the WHERE clause in SQL
Using the Array_contains function in the WHERE clause for Array type columns (in Spark SQL)
Using the explode function in the WHERE clause for Array type columns (in Spark SQL)
Using the split function in the WHERE clause for String type columns (in Spark SQL)
Using the to_date function in the WHERE clause for Date type columns (in Spark SQL)
Using the date_add function in the WHERE clause for Date type columns (in Spark SQL)
Using the date_sub function in the WHERE clause for Date type columns (in Spark SQL)
Using the datediff function in the WHERE clause for Date type columns (in Spark SQL)
Using the current_date function in the WHERE clause for Date type columns (in Spark SQL)
Using the current_timestamp function in the WHERE clause for Timestamp type columns (in Spark SQL)
Using the year function in the WHERE clause for Date or Timestamp type columns (in Spark SQL)
Using the month function in the WHERE clause for Date or Timestamp type columns (in Spark SQL)
Using the day function in the WHERE clause for Date or Timestamp type columns (in Spark SQL)
Using the hour function in the WHERE clause for Timestamp type columns (in Spark SQL)
Using the minute function in the WHERE clause for Timestamp type columns (in Spark SQL)
Using the second function in the WHERE clause for Timestamp type columns (in Spark SQL)
Using the concat function in the WHERE clause for String type columns (in Spark SQL)
Using the lower function in the WHERE clause for String type columns (in Spark SQL)
Using the upper function in the WHERE clause for String type columns (in Spark SQL)
Using the count function in the WHERE clause for counting rows (in Spark SQL)
Using the sum function in the WHERE clause for calculating the sum of numeric values (in Spark SQL)
Using the avg function in the WHERE clause for calculating the average of numeric values (in Spark SQL)
Using the min function in the WHERE clause for finding the minimum value (in Spark SQL)
Using the max function in the WHERE clause for finding the maximum value (in Spark SQL)
Using the first function in the WHERE clause for retrieving the first value in a group (in Spark SQL)
Using the last function in the WHERE clause for retrieving the last value in a group (in Spark SQL)
Using the lead function in the WHERE clause for retrieving the next value in a group (in Spark SQL)
Using the lag function in the WHERE clause for retrieving the previous value in a group (in Spark SQL)
Using the rank function in the WHERE clause for assigning rank to rows in a group based on a given criteria (in Spark SQL)
Using the dense_rank function in the WHERE clause for assigning dense rank to rows in a group based on a given criteria (in Spark SQL)
Using the percent_rank function in the WHERE clause for calculating the percentile rank of rows in a group (in Spark SQL)
Using the cume_dist function in the WHERE clause for calculating the cumulative distribution of rows in a group (in Spark SQL)
Using the row_number function in the WHERE clause for generating unique row numbers in a group (in Spark SQL)
Using the ntile function in the WHERE clause for dividing rows into groups based on a specified number (in Spark SQL)
Using the explode_outer function in the WHERE clause for Array type columns, returning null for empty arrays (in Spark SQL)
Using the array function in the WHERE clause to create arrays for Array type columns (in Spark SQL)
Using the map function in the WHERE clause to create maps for Map type columns (in Spark SQL)
Using the struct function in the WHERE clause to create structs for Struct type columns (in Spark SQL)
Using the when function in the WHERE clause for conditional filtering (in Spark SQL)
Using the otherwise function in the WHERE clause for specifying a default value when using the when function (in Spark SQL)